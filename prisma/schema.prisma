generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["crm", "tests"]
}

model Tenet {
  id                             Bytes                            @id
  name                           String                           @unique
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  activities                     Activity[]
  activitySteps                  ActivityStep[]
  activityTemplateStepAssignment ActivityTemplateStepAssignment[]
  activityTemplateSteps          ActivityTemplateStep[]
  activityTemplates              ActivityTemplate[]
  activityWaypointTemplates      ActivityWaypointTemplate[]
  activityWaypoints              ActivityWaypoint[]
  attachments                    Attachment[]
  auditEvents                    AuditEvent[]
  contactEmails                  ContactEmail[]
  contactPhones                  ContactPhone[]
  contactTimelineEvents          ContactTimelineEvent[]
  contacts                       Contact[]
  importantDates                 ImportantDate[]
  logs                           Log[]
  notes                          Note[]
  opportunities                  Opportunity[]
  products                       ProductType[]
  templateAssignments            TemplateAssignment[]
  users                          User[]

  @@index([name])
  @@map("tenets")
  @@schema("crm")
}

model User {
  /// @@ai-enabled
  id                      Bytes                            @id
  /// @ai-field
  email                   String                           @unique
  /// @ai-field
  firstName               String
  /// @ai-field
  lastName                String
  /// @computed('fullName')
  /// @ai-field
  fullName                String
  createdAt               DateTime                         @default(now())
  updatedAt               DateTime                         @updatedAt
  password                String
  enabled                 Boolean                          @default(true)
  type                    AccessGroup                      @default(CLIENT)
  tenetId                 Bytes?
  system                  Boolean                          @default(false)
  /// @@soft-delete
  deleted                 Boolean                          @default(false)
  deletedAt               DateTime?
  assignedActivities      Activity[]
  activitySteps           ActivityStepUserJoin[]
  templateStepAssignments ActivityTemplateStepAssignment[]
  activities              ActivityUserJoin[]
  auditEvents             AuditEvent[]
  events                  ContactTimelineEvent[]
  notes                   Note[]
  templateAssignments     TemplateAssignment[]
  tokens                  Token[]
  opportunities           UserOpportunityJoin[]
  waypoints               UserWaypointJoin[]
  tenet                   Tenet?                           @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([fullName])
  @@index([tenetId])
  @@index([deleted])
  @@map("users")
  @@schema("crm")
}

model Contact {
  /// @@ai-enabled
  id                                   Bytes                             @id
  /// @ai-field
  firstName                            String?
  /// @ai-field
  lastName                             String
  /// @wrapper-ignore
  fullName                             String
  tenetId                              Bytes
  /// @ai-field
  importantNotes                       String?
  createdAt                            DateTime                          @default(now())
  updatedAt                            DateTime                          @updatedAt
  /// @graph
  /// @ai-field(Contact type, either individual, household, or company)
  type                                 ContactType
  /// @ai-field
  status                               ContactStatus
  /// @ai-field(Contact's investment lifecycle stage)
  lifecycleStage                       LifecycleStage?
  lastContactedDate                    DateTime?
  followUpDate                         DateTime?
  /// @ai-field
  householdId                          Bytes?
  /// @ai-field
  householdStatus                      HouseholdRelationshipStatus?
  /// @ai-field
  companyId                            Bytes?
  /// @ai-field
  position                             String?
  /// @ai-field
  companyStatus                        CompanyRelationshipStatus?
  /// @ai-field
  headOfHouseholdId                    Bytes?                            @unique
  /// @ai-field
  industry                             String?
  /// @ai-field(This company's website)
  website                              String?
  /// @ai-field(This company's size)
  size                                 Int?
  /// @ai-field
  primaryContactId                     Bytes?                            @unique
  /// @@soft-delete
  deleted                              Boolean                           @default(false)
  deletedAt                            DateTime?
  activities                           ActivityContactJoin[]
  emails                               ContactEmail[]
  opportunities                        ContactOpportunityJoin[]
  phones                               ContactPhone[]
  relationAsSource                     ContactRelationship[]             @relation("source")
  relationAsTarget                     ContactRelationship[]             @relation("target")
  contact_timeline_events_contact_join ContactTimelineEventContactJoin[]
  company                              Contact?                          @relation("company", fields: [companyId], references: [id])
  employees                            Contact[]                         @relation("company")
  headOfHousehold                      Contact?                          @relation("headOfHousehold", fields: [headOfHouseholdId], references: [id])
  headOfHouseholdFor                   Contact?                          @relation("headOfHousehold")
  household                            Contact?                          @relation("household", fields: [householdId], references: [id])
  householdMembers                     Contact[]                         @relation("household")
  primaryContact                       Contact?                          @relation("primaryContact", fields: [primaryContactId], references: [id])
  primaryContactFor                    Contact?                          @relation("primaryContact")
  tenet                                Tenet                             @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  importantDates                       ImportantDate[]
  notes                                Note[]

  @@index([fullName])
  @@index([lastName])
  @@index([tenetId])
  @@index([householdId])
  @@index([companyId])
  @@index([primaryContactId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([deleted])
  @@map("contacts")
  @@schema("crm")
}

model ContactRelationship {
  /// @@wrapper-ignore
  id          Bytes     @id
  sourceId    Bytes
  targetId    Bytes
  type        String
  established DateTime?
  notes       String?
  source      Contact   @relation("source", fields: [sourceId], references: [id], onDelete: Cascade)
  target      Contact   @relation("target", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId, type])
  @@map("contact_relationships")
  @@schema("crm")
}

model ActivityStep {
  /// @@ai-enabled
  id         Bytes                  @id
  /// @ai-field
  title      String
  /// @ai-field
  completed  Boolean
  /// @ai-field
  activityId Bytes
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  tenetId    Bytes
  /// @ai-field(Type of step, either checkbox, attachment, or form)
  type       ActivityStepType       @default(CHECK)
  /// @ai-field(Step order)
  order      Int
  assignedTo ActivityStepUserJoin[]
  activity   Activity               @relation(fields: [activityId], references: [id], onDelete: Cascade)
  tenet      Tenet                  @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@index([tenetId])
  @@index([order])
  @@map("activity_steps")
  @@schema("crm")
}

model ActivityStepUserJoin {
  /// @@wrapper-ignore
  activityStepId Bytes
  userId         Bytes
  stepRelation   ActivityStep @relation(fields: [activityStepId], references: [id], onDelete: Cascade)
  userRelation   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([activityStepId, userId])
  @@map("activity_step_user_joins")
  @@schema("crm")
}

model UserWaypointJoin {
  /// @@wrapper-ignore
  userId           Bytes
  waypointId       Bytes
  userRelation     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  waypointRelation ActivityWaypoint @relation(fields: [waypointId], references: [id], onDelete: Cascade)

  @@id([userId, waypointId])
  @@map("user_waypoint_join")
  @@schema("crm")
}

model ActivityWaypoint {
  /// @@ai-enabled
  id              Bytes                     @id
  title           String
  description     String?
  summary         String?
  status          ActivityStatus
  order           Int
  actualStart     DateTime
  dueDate         DateTime
  actualEnd       DateTime?
  /// @ai-field
  activityId      Bytes
  templateId      Bytes?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  tenetId         Bytes
  childActivities Activity[]                @relation("parentWaypoint")
  activity        Activity                  @relation("childWaypoints", fields: [activityId], references: [id], onDelete: Cascade)
  template        ActivityWaypointTemplate? @relation(fields: [templateId], references: [id], onDelete: Restrict)
  tenet           Tenet                     @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  events          ContactTimelineEvent[]
  Note            Note[]
  users           UserWaypointJoin[]

  @@index([activityId])
  @@index([templateId])
  @@index([tenetId])
  @@index([order])
  @@map("activity_waypoints")
  @@schema("crm")
}

model TemplateAssignment {
  id                 Bytes                     @id
  specificUserId     Bytes?
  specificRole       Role?
  activityTemplateId Bytes?
  waypointTemplateId Bytes?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  tenetId            Bytes
  activityTemplate   ActivityTemplate?         @relation(fields: [activityTemplateId], references: [id], onDelete: Cascade)
  specificUser       User?                     @relation(fields: [specificUserId], references: [id], onDelete: Cascade)
  tenet              Tenet                     @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  waypointTemplate   ActivityWaypointTemplate? @relation(fields: [waypointTemplateId], references: [id], onDelete: Cascade)

  @@index([waypointTemplateId])
  @@index([activityTemplateId])
  @@index([specificUserId])
  @@index([tenetId])
  @@map("template_assignments")
  @@schema("crm")
}

model ActivityWaypointTemplate {
  id               Bytes                @id
  title            String
  description      String?
  defaultStatus    ActivityStatus
  order            Int
  dateOffsetType   DateOffsetType
  dueDate          Int
  parentActivityId Bytes
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  tenetId          Bytes
  activities       ActivityTemplate[]   @relation("parentWaypoint")
  parentActivity   ActivityTemplate     @relation("childWaypoints", fields: [parentActivityId], references: [id], onDelete: Cascade)
  tenet            Tenet                @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  waypoints        ActivityWaypoint[]
  assignments      TemplateAssignment[]

  @@index([parentActivityId])
  @@index([tenetId])
  @@index([order])
  @@map("activity_waypoint_templates")
  @@schema("crm")
}

model ActivityTemplateStep {
  id                 Bytes                            @id
  order              Int
  title              String
  type               ActivityStepType                 @default(CHECK)
  activityTemplateId Bytes
  tenetId            Bytes
  assignedTo         ActivityTemplateStepAssignment[]
  activityTemplate   ActivityTemplate                 @relation(fields: [activityTemplateId], references: [id], onDelete: Cascade)
  tenet              Tenet                            @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([activityTemplateId])
  @@index([order])
  @@index([tenetId])
  @@map("activity_template_steps")
  @@schema("crm")
}

model ActivityTemplateStepAssignment {
  id                     Bytes                @id
  specificUserId         Bytes?
  specificRole           Role?
  activityTemplateStepId Bytes
  tenetId                Bytes
  activityTemplateStep   ActivityTemplateStep @relation(fields: [activityTemplateStepId], references: [id], onDelete: Cascade)
  specificUser           User?                @relation(fields: [specificUserId], references: [id], onDelete: Cascade)
  tenet                  Tenet                @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([tenetId])
  @@index([activityTemplateStepId])
  @@map("activity_template_step_assignments")
  @@schema("crm")
}

model ActivityTemplate {
  id                Bytes                      @id
  title             String
  description       String?
  type              ActivityType
  defaultPriority   ActivityPriority
  defaultStatus     ActivityStatus
  taskScheduleType  TaskScheduleType?
  dateOffsetType    DateOffsetType
  startDate         Int
  endDate           Int
  startRelativeToId Bytes?
  parentWaypointId  Bytes?
  parentActivityId  Bytes?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  tenetId           Bytes
  order             Int?
  activities        Activity[]
  steps             ActivityTemplateStep[]
  parentActivity    ActivityTemplate?          @relation("parentActivity", fields: [parentActivityId], references: [id], onDelete: Cascade)
  childActivities   ActivityTemplate[]         @relation("parentActivity")
  parentWaypoint    ActivityWaypointTemplate?  @relation("parentWaypoint", fields: [parentWaypointId], references: [id])
  startRelativeTo   ActivityTemplate?          @relation("startRelativeTo", fields: [startRelativeToId], references: [id], onDelete: Cascade)
  dependents        ActivityTemplate[]         @relation("startRelativeTo")
  tenet             Tenet                      @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  waypoints         ActivityWaypointTemplate[] @relation("childWaypoints")
  assignments       TemplateAssignment[]

  @@index([title])
  @@index([parentWaypointId])
  @@index([parentActivityId])
  @@index([order])
  @@index([tenetId])
  @@map("activity_templates")
  @@schema("crm")
}

model Activity {
  /// @@ai-enabled
  id               Bytes                  @id
  /// @ai-field
  title            String
  /// @ai-field(Activity type, either task or schedule item)
  type             ActivityType
  /// @ai-field
  parentActivityId Bytes?
  /// @ai-field
  parentWaypointId Bytes?
  templateId       Bytes?
  /// @ai-field(Task/Schedule item subtype. Not applicable to notes)
  taskScheduleType TaskScheduleType?
  /// @ai-field
  startDate        DateTime
  /// @ai-field(The due date for this activity, for task/schedule items only)
  endDate          DateTime
  /// @ai-field
  completedAt      DateTime?
  /// @ai-field
  description      String?
  /// @ai-field
  priority         ActivityPriority       @default(MEDIUM)
  /// @ai-field
  status           ActivityStatus
  assignedById     Bytes
  /// @ai-field
  phoneNumber      String?
  /// @ai-field
  location         String?
  /// @ai-field(For schedule items only of type/subtype hold)
  holdReason       String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  tenetId          Bytes
  /// @@soft-delete
  deleted          Boolean                @default(false)
  deletedAt        DateTime?
  /// @ai-field(Order within the waypoint-type activitiy or individual path waypoint)
  order            Int?
  /// @ai-field
  opportunityId    Bytes?
  assignedBy       User                   @relation(fields: [assignedById], references: [id], onDelete: Cascade)
  opportunity      Opportunity?           @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  parentActivity   Activity?              @relation("childActivity", fields: [parentActivityId], references: [id], onDelete: Cascade)
  activities       Activity[]             @relation("childActivity")
  parentWaypoint   ActivityWaypoint?      @relation("parentWaypoint", fields: [parentWaypointId], references: [id])
  template         ActivityTemplate?      @relation(fields: [templateId], references: [id], onDelete: Restrict)
  tenet            Tenet                  @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  contacts         ActivityContactJoin[]
  steps            ActivityStep[]
  users            ActivityUserJoin[]
  waypoints        ActivityWaypoint[]     @relation("childWaypoints")
  attachments      Attachment[]
  events           ContactTimelineEvent[]
  notes            Note[]

  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([title])
  @@index([type])
  @@index([tenetId])
  @@index([status])
  @@index([taskScheduleType])
  @@index([parentActivityId])
  @@index([parentWaypointId])
  @@index([templateId])
  @@index([order])
  @@index([deleted])
  @@index([opportunityId])
  @@map("activities")
  @@schema("crm")
}

model ContactTimelineEvent {
  /// @@ai-enabled
  id                                   Bytes                             @id
  /// @ai-field
  activityId                           Bytes?
  /// @ai-field
  waypointId                           Bytes?
  /// @ai-field
  opportunityId                        Bytes?
  /// @ai-field(If associated with a note, the note this event is associated with)
  noteId                               Bytes?
  /// @ai-field(Info about the event, like what was updated)
  extraInfo                            String?
  /// @ai-field
  userId                               Bytes
  tenetId                              Bytes
  /// @ai-field
  eventType                            ContactTimelineEventType
  /// @ai-field(If the event is a relationship, the name of the relationship)
  relationshipType                     String?
  createdAt                            DateTime                          @default(now())
  updatedAt                            DateTime                          @updatedAt
  activity                             Activity?                         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  note                                 Note?                             @relation(fields: [noteId], references: [id], onDelete: Cascade)
  opportunity                          Opportunity?                      @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  tenet                                Tenet                             @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  user                                 User                              @relation(fields: [userId], references: [id], onDelete: Cascade)
  waypoint                             ActivityWaypoint?                 @relation(fields: [waypointId], references: [id], onDelete: Cascade)
  contact_timeline_events_contact_join ContactTimelineEventContactJoin[]

  @@index([activityId])
  @@index([noteId])
  @@index([userId])
  @@index([opportunityId])
  @@index([tenetId])
  @@map("contact_timeline_events")
  @@schema("crm")
}

model AuditEvent {
  id          Bytes          @id
  userId      Bytes
  tenetId     Bytes
  type        AuditEventType
  details     String?
  referenceId Bytes
  reference   Auditable
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  tenet       Tenet          @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reference, referenceId])
  @@index([type])
  @@index([userId])
  @@index([tenetId])
  @@index([createdAt])
  @@map("audit_events")
  @@schema("crm")
}

model ContactTimelineEventContactJoin {
  contactEventId          Bytes
  contactId               Bytes
  /// @ai-field(Describes how this contact relates to a contact event.)
  type                    ContactTimelineEventJoinType
  contact_timeline_events ContactTimelineEvent         @relation(fields: [contactEventId], references: [id], onDelete: Cascade)
  contacts                Contact                      @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([contactEventId, contactId])
  @@map("contact_timeline_events_contact_join")
  @@schema("crm")
}

model Note {
  /// @@ai-enabled
  id            Bytes                  @id
  /// @ai-field
  content       String
  /// @ai-field
  waypointId    Bytes?
  /// @ai-field
  activityId    Bytes?
  /// @ai-field
  contactId     Bytes?
  /// @ai-field
  opportunityId Bytes?
  tenetId       Bytes
  /// @ai-field
  authorId      Bytes
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  /// @@soft-delete
  deleted       Boolean                @default(false)
  deletedAt     DateTime?
  noteType      NoteType               @default(NOTE)
  events        ContactTimelineEvent[]
  activity      Activity?              @relation(fields: [activityId], references: [id], onDelete: Cascade)
  author        User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  contact       Contact?               @relation(fields: [contactId], references: [id], onDelete: Cascade)
  opportunity   Opportunity?           @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  tenet         Tenet                  @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  waypoint      ActivityWaypoint?      @relation(fields: [waypointId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([tenetId])
  @@index([activityId])
  @@index([contactId])
  @@index([deleted])
  @@map("notes")
  @@schema("crm")
}

model Attachment {
  id         Bytes     @id
  name       String
  location   String
  activityId Bytes?
  tenetId    Bytes
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  tenet      Tenet     @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([tenetId])
  @@index([location])
  @@map("attachments")
  @@schema("crm")
}

model ActivityContactJoin {
  /// @@wrapper-ignore
  activityId       Bytes
  contactId        Bytes
  activityRelation Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  contactRelation  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([activityId, contactId])
  @@map("activity_contact_join")
  @@schema("crm")
}

model ActivityUserJoin {
  /// @@wrapper-ignore
  activityId       Bytes
  userId           Bytes
  activityRelation Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userRelation     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([activityId, userId])
  @@map("activity_user_join")
  @@schema("crm")
}

model ContactEmail {
  /// @@ai-enabled
  id        Bytes    @id
  /// @ai-field
  email     String
  /// @ai-field
  isPrimary Boolean  @default(false)
  /// @ai-field
  contactId Bytes
  tenetId   Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tenet     Tenet    @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([tenetId])
  @@index([contactId])
  @@index([isPrimary])
  @@map("contact_email")
  @@schema("crm")
}

model ContactPhone {
  /// @@ai-enabled
  id        Bytes     @id
  /// @ai-field
  number    String
  /// @ai-field
  type      PhoneType
  /// @ai-field
  isPrimary Boolean   @default(false)
  /// @ai-field
  contactId Bytes
  tenetId   Bytes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tenet     Tenet     @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([number])
  @@index([type])
  @@index([tenetId])
  @@index([contactId])
  @@index([isPrimary])
  @@map("contact_phone")
  @@schema("crm")
}

model Address {
  /// @@ai-enabled
  id        Bytes       @id
  /// @ai-field
  street    String
  /// @ai-field
  city      String
  /// @ai-field
  state     String
  /// @ai-field
  zip       String
  /// @ai-field
  country   String
  /// @ai-field
  type      AddressType
  /// @ai-field
  primary   Boolean     @default(false)
  contactid Bytes
  tenetid   Bytes
  createdat DateTime    @default(now())
  updatedat DateTime
  /// @ai-field
  timezone  String?

  @@map("addresses")
  @@schema("crm")
}

model ConfigOption {
  id    Bytes  @id
  name  String @unique
  /// @uniqueEncrypted
  value String

  @@map("config")
  @@schema("crm")
}

model ImportantDate {
  /// @@ai-enabled
  id        Bytes             @id
  /// @ai-field
  date      DateTime
  /// @ai-field
  type      ImportantDateType
  /// @ai-field
  contactId Bytes
  tenetId   Bytes
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  contact   Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tenet     Tenet             @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([type])
  @@index([contactId])
  @@index([tenetId])
  @@map("important_dates")
  @@schema("crm")
}

model Opportunity {
  /// @@ai-enabled
  id                Bytes                    @id
  /// @ai-field
  title             String
  /// @ai-field
  description       String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  /// @ai-field(Value of the opportunity)
  value             Float
  /// @ai-field(Probability of closing the opportunity based on historical data)
  probability       Float
  /// @ai-field
  expectedCloseDate DateTime
  /// @ai-field
  actualCloseDate   DateTime?
  /// @ai-field
  status            OpportunityStatus
  statusHistory     OpportunityStatus[]
  /// @@soft-delete
  deleted           Boolean                  @default(false)
  deletedAt         DateTime?
  tenetId           Bytes
  /// @wrapper-ignore
  expectedValue     Float
  activities        Activity[]
  contacts          ContactOpportunityJoin[]
  events            ContactTimelineEvent[]
  notes             Note[]
  tenet             Tenet                    @relation(fields: [tenetId], references: [id], onDelete: Cascade)
  products          OpportunityProduct[]
  teamMembers       UserOpportunityJoin[]

  @@index([title])
  @@index([status])
  @@index([expectedCloseDate])
  @@index([actualCloseDate])
  @@index([tenetId])
  @@index([deleted])
  @@map("opportunities")
  @@schema("crm")
}

model ContactOpportunityJoin {
  /// @@wrapper-ignore
  contactId           Bytes
  opportunityId       Bytes
  contactRelation     Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  opportunityRelation Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@id([contactId, opportunityId])
  @@map("contact_opportunity_join")
  @@schema("crm")
}

model UserOpportunityJoin {
  /// @@wrapper-ignore
  userId              Bytes
  opportunityId       Bytes
  opportunityRelation Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  userRelation        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, opportunityId])
  @@map("user_opportunity_join")
  @@schema("crm")
}

model OpportunityProduct {
  /// @@ai-enabled
  id            Bytes       @id
  /// @ai-field
  price         Float
  /// @ai-field(Display order)
  order         Int
  /// @ai-field
  commission    Float
  opportunityId Bytes
  productTypeId Bytes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  productType   ProductType @relation(fields: [productTypeId], references: [id], onDelete: Cascade)

  @@index([opportunityId])
  @@index([productTypeId])
  @@index([order])
  @@map("opportunity_product")
  @@schema("crm")
}

model ProductType {
  /// @@ai-enabled
  id                Bytes                @id
  /// @ai-field
  title             String
  /// @ai-field
  description       String?
  /// @ai-field
  defaultCommission Float
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  tenetId           Bytes
  opportunities     OpportunityProduct[]
  tenet             Tenet                @relation(fields: [tenetId], references: [id], onDelete: Cascade)

  @@index([tenetId])
  @@index([title])
  @@map("products")
  @@schema("crm")
}

model Log {
  id            Bytes    @id
  /// @uniqueEncrypted
  userEmail     String?
  tenetId       Bytes?
  message       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  severity      LogLevel @default(INFO)
  /// @encrypted
  stacktrace    String?
  /// @uniqueEncrypted
  source        String?
  /// @uniqueEncrypted
  secureDetails String?
  tenet         Tenet?   @relation(fields: [tenetId], references: [id])

  @@index([createdAt])
  @@index([message])
  @@index([severity])
  @@index([tenetId])
  @@map("logs")
  @@schema("crm")
}

model Token {
  id        Bytes    @id
  userId    Bytes
  createdAt DateTime @default(now())
  refresh   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("tokens")
  @@schema("crm")
}

model TZData {
  /// @@wrapper-ignore
  id           Int    @id @default(autoincrement())
  name         String
  provinceName String
  countryCode  String @db.VarChar(2)
  tz           String

  @@unique([name, provinceName, countryCode], map: "tz_data_name_provincename_countrycode_key")
  @@map("tz_data")
  @@schema("crm")
}

model TestObject {
  id        Bytes             @id
  required  String
  persisted String?
  join1     JoinTestObject[]
  join2     JoinTestObject2[]
  wrapped   WrappedObject[]

  @@schema("tests")
}

model WrappedObject {
  id           Bytes      @id
  persisted    String?
  testObjectId Bytes
  testObject   TestObject @relation(fields: [testObjectId], references: [id], onDelete: Cascade)

  @@schema("tests")
}

model JoinTestObject {
  /// @@wrapper-ignore
  testObjectId         Bytes
  joinedObjectId       Bytes
  joinProperty         String
  joinedObjectRelation JoinedObject1 @relation(fields: [joinedObjectId], references: [id], onDelete: Cascade)
  testObjectRelation   TestObject    @relation(fields: [testObjectId], references: [id], onDelete: Cascade)

  @@id([testObjectId, joinedObjectId])
  @@schema("tests")
}

model JoinTestObject2 {
  /// @@wrapper-ignore
  id                   Bytes         @id
  testObjectId         Bytes
  joinedObjectId       Bytes
  joinProperty         String
  joinedObjectRelation JoinedObject2 @relation(fields: [joinedObjectId], references: [id], onDelete: Cascade)
  testObjectRelation   TestObject    @relation(fields: [testObjectId], references: [id], onDelete: Cascade)

  @@schema("tests")
}

model JoinedObject1 {
  id          Bytes            @id
  persisted   String?
  testObjects JoinTestObject[]

  @@schema("tests")
}

model JoinedObject2 {
  id          Bytes             @id
  persisted   String?
  testObjects JoinTestObject2[]

  @@schema("tests")
}

model JoinSelfReference {
  /// @@wrapper-ignore
  id           Bytes                    @id
  sourceId     Bytes
  targetId     Bytes
  joinProperty String
  source       SelfReferencialJoinModel @relation("source", fields: [sourceId], references: [id], onDelete: Cascade)
  target       SelfReferencialJoinModel @relation("target", fields: [targetId], references: [id], onDelete: Cascade)

  @@schema("tests")
}

model SelfReferencialJoinModel {
  id            Bytes               @id
  joinsAsSource JoinSelfReference[] @relation("source")
  joinsAsTarget JoinSelfReference[] @relation("target")

  @@schema("tests")
}

enum ActivityStepType {
  /// @@ai-enum-description(Describes the type of step in an activity)
  CHECK
  ATTACHMENT
  FORM

  @@schema("crm")
}

enum DateOffsetType {
  /// @@ai-enum-description(Describes how a date is offset in a template, either from the beginning of the template, the start of the activity's parent waypoint, or the completion of another activity within the path)
  WAYPOINT
  ACTIVITY
  PATH_START

  @@schema("crm")
}

enum ContactTimelineEventType {
  /// @@ai-enum-description(Describes the type of timeline event that occurred)
  NOTE
  ACTIVITY_CREATED
  ACTIVITY_COMPLETED
  ACTIVITY_CANCELLED
  ACTIVITY_FAILED
  ACTIVITY_STATUS_CHANGED
  ACTIVITY_REMOVED
  ACTIVITY_STEP_CHANGED
  ACTIVITY_ADDED_TO
  ACTIVITY_REMOVED_FROM
  WAYPOINT_CREATED
  CONTACT_CREATED
  CONTACT_REMOVED
  MEMBER_ADDED
  MEMBER_REMOVED
  RELATIONSHIP_ADDED
  RELATIONSHIP_REMOVED
  OPPORTUNITY_CREATED
  OPPORTUNITY_REMOVED
  OPPORTUNITY_WON
  OPPORTUNITY_LOST
  OPPORTUNITY_CANCELLED
  OPPORTUNITY_STATUS_CHANGED
  EMAIL_SENT
  EMAIL_RECEIVED

  @@schema("crm")
}

enum Auditable {
  /// @@ai-disabled
  /// @@server
  CONTACT
  NOTE
  ACTIVITY
  OPPORTUNITY
  USER
  ADDRESS
  CONTACT_EMAIL
  CONTACT_PHONE
  IMPORTANT_DATE
  ATTACHMENT

  @@schema("crm")
}

enum AuditEventType {
  /// @@ai-disabled
  /// @@server
  READ
  CREATE
  UPDATE
  DELETE

  @@schema("crm")
}

enum ContactTimelineEventJoinType {
  /// @@ai-enum-description(Describes how the contact was related to the event)
  ACTIVITY_CONTACT
  MEMBER_CONTACT
  MEMBER_PARENT
  CONTACT_TARGET
  OPPORTUNITY_CONTACT
  RELATIONSHIP_FROM
  RELATIONSHIP_TO

  @@schema("crm")
}

enum NoteType {
  NOTE
  CALL
  CALL_OUTBOUND
  CALL_INBOUND

  @@schema("crm")
}

enum OpportunityStatus {
  UNSTARTED
  IDENTIFIED
  FIRST_APPOINTMENT
  SECOND_APPOINTMENT
  THIRD_APPOINTMENT
  CLOSING
  PAPERWORK
  WON
  LOST
  CANCELLED

  @@schema("crm")
}

enum ActivityType {
  /// @@ai-enum-description(Describes the type of activity. Paths contain multiple waypoints and may be connected to a logical "blueprint". Multi-activities have child activities and are not connected to a blueprint. Tasks and scheduled items are single activities which may have multiple steps.)
  PATH
  WAYPOINT
  TASK
  SCHEDULED

  @@schema("crm")
}

enum ActivityPriority {
  HIGH
  MEDIUM
  LOW

  @@schema("crm")
}

enum TaskScheduleType {
  /// @@ai-enum-description(Describes the subtype of task or scheduled activities)
  COMMUNICATION
  COMMUNICATION_CALL
  COMMUNICATION_CALL_OUTBOUND
  COMMUNICATION_CALL_INBOUND
  COMMUNICATION_MESSAGE
  COMMUNICATION_EMAIL
  MEETING
  MEETING_VIRTUAL
  MEETING_IN_PERSON
  MEETING_CLIENT
  MEETING_INTERNAL
  MEETING_PERSONAL
  FINANCIAL_PLANNING
  FINANCIAL_PLANNING_PORTFOLIO_REVIEW
  FINANCIAL_PLANNING_INVESTMENT_STRATEGY
  FINANCIAL_PLANNING_TAX_PLANNING
  FINANCIAL_PLANNING_ESTATE_PLANNING
  FINANCIAL_PLANNING_RETIREMENT_PLANNING
  FINANCIAL_PLANNING_RISK_ASSESSMENT
  TASK
  TASK_ADMIN
  TASK_COMPLIANCE_CHECK
  TASK_DOCUMENT_PREPARATION
  TASK_PAPERWORK
  TASK_TODO
  HOLD
  HOLD_PRIVATE
  HOLD_BLOCKED
  HOLD_TENTATIVE

  @@schema("crm")
}

enum ActivityStatus {
  NOT_STARTED
  ASSIGNED
  IN_PROGRESS
  WAITING_FOR_INFO
  PAUSED
  REASSIGNED
  PENDING_APPROVAL
  IN_REVIEW
  COMPLETED
  CANCELLED
  FAILED
  SCHEDULED

  @@schema("crm")
}

enum AddressType {
  HOME
  WORK
  VACATION
  OTHER

  @@schema("crm")
}

enum ContactType {
  INDIVIDUAL
  HOUSEHOLD
  COMPANY

  @@schema("crm")
}

enum ContactStatus {
  CLIENT
  LEAD
  OFF
  PERM_OFF
  PROSPECT
  STRATEGIC_PARTNER
  PLAN_PARTICIPANT
  OTHER

  @@schema("crm")
}

enum AccessGroup {
  SYSADMIN
  ADMIN
  CLIENT

  @@schema("crm")
}

enum PhoneType {
  HOME
  WORK
  VACATION
  MOBILE
  OTHER

  @@schema("crm")
}

enum ImportantDateType {
  ANNIVERSARY
  RETIREMENT
  BIRTHDAY

  @@schema("crm")
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  HIGH
  CRITICAL

  @@schema("crm")
}

enum HouseholdRelationshipStatus {
  HEAD_OF_HOUSEHOLD
  SPOUSE
  SON
  DAUGHTER
  AUNT
  UNCLE
  FATHER
  MOTHER
  BROTHER
  SISTER
  NIECE
  NEPHEW

  @@schema("crm")
}

enum CompanyRelationshipStatus {
  OWNS_COMPANY
  C_SUTIE
  EXECUTIVE
  MANAGER
  EMPLOYEE
  CONTRACTOR
  PARTNER
  CHAIRMAN_OF_THE_BOARD
  BOARD_MEMBER

  @@schema("crm")
}

enum LifecycleStage {
  ACCUMULATION
  PRE_RETIREMENT
  RETIREMENT
  SEMI_RETIRED
  NOT_ASSIGNED
  PRE_INVESTMENT
  LEGACY

  @@schema("crm")
}

enum Role {
  COMPUTER_OPERATOR
  ADVISOR
  SERVICE_ASSISTANT
  SALES_ASSISTANT

  @@schema("crm")
}
